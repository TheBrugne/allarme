
ATMEGA8_100KHZ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000142  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000619  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000552  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000348  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	3f d0       	rcall	.+126    	; 0xc2 <main>
  44:	42 c0       	rjmp	.+132    	; 0xca <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:
#include <avr/interrupt.h>

unsigned int ctr=0;
unsigned char inverti;
ISR(TIMER0_OVF_vect) // 1 tick ogni 0,000016sec;   0,000016 *250 *25= 0,1
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	ctr++;
  56:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  5a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  5e:	01 96       	adiw	r24, 0x01	; 1
	if (ctr==25)
  60:	89 31       	cpi	r24, 0x19	; 25
  62:	91 05       	cpc	r25, r1
  64:	29 f0       	breq	.+10     	; 0x70 <__vector_9+0x28>

unsigned int ctr=0;
unsigned char inverti;
ISR(TIMER0_OVF_vect) // 1 tick ogni 0,000016sec;   0,000016 *250 *25= 0,1
{
	ctr++;
  66:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  6e:	12 c0       	rjmp	.+36     	; 0x94 <__vector_9+0x4c>
	if (ctr==25)
	{
		ctr=0;
  70:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  74:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (inverti%2==0)
  78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <inverti>
  7c:	80 fd       	sbrc	r24, 0
  7e:	06 c0       	rjmp	.+12     	; 0x8c <__vector_9+0x44>
		{
			PORTD|=1<<PD6;
  80:	96 9a       	sbi	0x12, 6	; 18
			PORTB|=1<<PB5;
  82:	c5 9a       	sbi	0x18, 5	; 24
			inverti=1;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <inverti>
  8a:	04 c0       	rjmp	.+8      	; 0x94 <__vector_9+0x4c>
			
		}
		else
		{
			PORTD&=~(1<<PD6);
  8c:	96 98       	cbi	0x12, 6	; 18
			PORTB&=~(1<<PB5);
  8e:	c5 98       	cbi	0x18, 5	; 24
			inverti=0;
  90:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <inverti>
		}
		//TCNT0=56;
	}
	TCNT0=6;
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	82 bf       	out	0x32, r24	; 50
    
 
}
  98:	9f 91       	pop	r25
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <init_timer0_ovf>:

#define CLOCK_PIN 12

void init_timer0_ovf(void)
{
    DDRD |=1<<PD6;
  a6:	8e 9a       	sbi	0x11, 6	; 17
	DDRB |=1<<PB5;
  a8:	bd 9a       	sbi	0x17, 5	; 23
	PORTB &=~(1<<PB5);
  aa:	c5 98       	cbi	0x18, 5	; 24
    TCCR0 =0x00;
  ac:	13 be       	out	0x33, r1	; 51
    TCCR0 |= (1<<CS02);  //prescalare a 256
  ae:	83 b7       	in	r24, 0x33	; 51
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	83 bf       	out	0x33, r24	; 51
    /* 16MHZ/256=62500
    1/62500=0,000016;
    0,000016*252= 0,01 10 millisecondi; mi basta inizializzare tcnt0 a 6 e aspettare 25 interrupt;
    */
    TCNT0=6; 
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	82 bf       	out	0x32, r24	; 50
  b8:	08 95       	ret

000000ba <start_timer0_ovf>:
	
}

void start_timer0_ovf(void)
{
     TIMSK |= 1<< TOIE0;    //abilito interrupt sul  ovf zero
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	89 bf       	out	0x39, r24	; 57
  c0:	08 95       	ret

000000c2 <main>:

int main(void) 
{
	
	
    init_timer0_ovf(); //inziializzo timer0 per ciclo main
  c2:	f1 df       	rcall	.-30     	; 0xa6 <init_timer0_ovf>
    start_timer0_ovf(); //start timer interrupt
  c4:	fa df       	rcall	.-12     	; 0xba <start_timer0_ovf>
    sei(); //abilito interrupt globale
  c6:	78 94       	sei
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x6>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
