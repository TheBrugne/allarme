
ATTINY85_CALIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800060  00800060  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bc  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cd  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000537  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021e  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	b0 c0       	rjmp	.+352    	; 0x164 <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 ed       	ldi	r30, 0xD8	; 216
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 38       	cpi	r26, 0x86	; 134
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	23 d1       	rcall	.+582    	; 0x298 <main>
  52:	40 c1       	rjmp	.+640    	; 0x2d4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_timer0_ovf>:
volatile unsigned int jitter=0;
volatile unsigned char a=0;
void init_timer0_ovf(void)
{
	
	TCCR0A =0x00;
  56:	1a bc       	out	0x2a, r1	; 42
	TCCR0B |= (1<<CS02);//256,   //prescalare a 8; visto che il master manda una quadra a 5khz=200microsecondi, 1/1MHZ=1microsecondo, mi aspetto che sia tarato quando TCNT0 vale circa 200
  58:	83 b7       	in	r24, 0x33	; 51
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  5e:	12 be       	out	0x32, r1	; 50
  60:	08 95       	ret

00000062 <start_timer0_ovf>:
	
}

void start_timer0_ovf(void)
{
	TIMSK |= 1<< TOIE0;    //abilito interrupt sul  ovf zero
  62:	89 b7       	in	r24, 0x39	; 57
  64:	82 60       	ori	r24, 0x02	; 2
  66:	89 bf       	out	0x39, r24	; 57
  68:	08 95       	ret

0000006a <stop_timer0_ovf>:
}

void stop_timer0_ovf(void)
{
	TIMSK &= ~(1<< TOIE0);    //abilito interrupt sul  ovf zero
  6a:	89 b7       	in	r24, 0x39	; 57
  6c:	8d 7f       	andi	r24, 0xFD	; 253
  6e:	89 bf       	out	0x39, r24	; 57
  70:	08 95       	ret

00000072 <__vector_5>:
}


ISR(TIMER0_OVF_vect) //1ms
{
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
	if (jitter<100)
  80:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
  84:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
  88:	84 36       	cpi	r24, 0x64	; 100
  8a:	91 05       	cpc	r25, r1
  8c:	48 f4       	brcc	.+18     	; 0xa0 <__vector_5+0x2e>
		jitter++;
  8e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
  92:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <jitter+0x1>
  9c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <jitter>
	TCNT0=0; 
  a0:	12 be       	out	0x32, r1	; 50
	ovf_count++;
  a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
  a6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ovf_count+0x1>
  b0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ovf_count>
	if (ovf_count==50)
  b4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
  b8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
  bc:	c2 97       	sbiw	r24, 0x32	; 50
  be:	71 f4       	brne	.+28     	; 0xdc <__vector_5+0x6a>
		{
			contatore=0;
  c0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <contatore>
			a++;
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			OSCCAL=a;
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	81 bf       	out	0x31, r24	; 49
			ovf_count=0;
  d4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ovf_count+0x1>
  d8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ovf_count>
		}
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <getbestfreq>:

unsigned char getbestfreq()
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	unsigned int diff= 65535;
	unsigned int loc_diff;
	unsigned char b=0;
	for (int i =0; i<ptr; i++)
  ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
  f2:	88 23       	and	r24, r24
  f4:	71 f1       	breq	.+92     	; 0x152 <getbestfreq+0x68>
  f6:	a2 e7       	ldi	r26, 0x72	; 114
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	6f ef       	ldi	r22, 0xFF	; 255
 106:	7f ef       	ldi	r23, 0xFF	; 255
	{
		loc_diff= high[i]*255 + low[i];
 108:	2d 91       	ld	r18, X+
 10a:	c1 91       	ld	r28, Z+
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	c9 01       	movw	r24, r18
 110:	82 95       	swap	r24
 112:	92 95       	swap	r25
 114:	90 7f       	andi	r25, 0xF0	; 240
 116:	98 27       	eor	r25, r24
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	98 27       	eor	r25, r24
 11c:	82 1b       	sub	r24, r18
 11e:	93 0b       	sbc	r25, r19
 120:	9c 01       	movw	r18, r24
 122:	22 95       	swap	r18
 124:	32 95       	swap	r19
 126:	30 7f       	andi	r19, 0xF0	; 240
 128:	32 27       	eor	r19, r18
 12a:	20 7f       	andi	r18, 0xF0	; 240
 12c:	32 27       	eor	r19, r18
 12e:	82 0f       	add	r24, r18
 130:	93 1f       	adc	r25, r19
 132:	8c 0f       	add	r24, r28
 134:	91 1d       	adc	r25, r1
		if (loc_diff<diff)
 136:	86 17       	cp	r24, r22
 138:	97 07       	cpc	r25, r23
 13a:	10 f4       	brcc	.+4      	; 0x140 <getbestfreq+0x56>
		{
			diff=loc_diff;
			b=i;
 13c:	d4 2f       	mov	r29, r20
	for (int i =0; i<ptr; i++)
	{
		loc_diff= high[i]*255 + low[i];
		if (loc_diff<diff)
		{
			diff=loc_diff;
 13e:	bc 01       	movw	r22, r24
unsigned char getbestfreq()
{
	unsigned int diff= 65535;
	unsigned int loc_diff;
	unsigned char b=0;
	for (int i =0; i<ptr; i++)
 140:	4f 5f       	subi	r20, 0xFF	; 255
 142:	5f 4f       	sbci	r21, 0xFF	; 255
 144:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	48 17       	cp	r20, r24
 14c:	59 07       	cpc	r21, r25
 14e:	e4 f2       	brlt	.-72     	; 0x108 <getbestfreq+0x1e>
 150:	01 c0       	rjmp	.+2      	; 0x154 <getbestfreq+0x6a>

unsigned char getbestfreq()
{
	unsigned int diff= 65535;
	unsigned int loc_diff;
	unsigned char b=0;
 152:	d0 e0       	ldi	r29, 0x00	; 0
		{
			diff=loc_diff;
			b=i;
		}
	}
	return freq[b];
 154:	ed 2f       	mov	r30, r29
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e8 59       	subi	r30, 0x98	; 152
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
}
 15c:	80 81       	ld	r24, Z
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <__vector_1>:
ISR(INT0_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	sei();
 186:	78 94       	sei
	if (contatore==0 && jitter >10)
 188:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <contatore>
 18c:	81 11       	cpse	r24, r1
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <__vector_1+0x50>
 190:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
 194:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
 198:	0b 97       	sbiw	r24, 0x0b	; 11
 19a:	60 f0       	brcs	.+24     	; 0x1b4 <__vector_1+0x50>
	{
		jitter=0;
 19c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <jitter+0x1>
 1a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <jitter>
		ovf_count=0;
 1a4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ovf_count+0x1>
 1a8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ovf_count>
		TCNT0=0;
 1ac:	12 be       	out	0x32, r1	; 50
		contatore=1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <contatore>
	}
	if (contatore==1 && jitter >10)
 1b4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <contatore>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <__vector_1+0x5a>
 1bc:	5a c0       	rjmp	.+180    	; 0x272 <__stack+0x13>
 1be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
 1c2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
 1c6:	0b 97       	sbiw	r24, 0x0b	; 11
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <__vector_1+0x68>
 1ca:	53 c0       	rjmp	.+166    	; 0x272 <__stack+0x13>
	{
		jitter=0;
 1cc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <jitter+0x1>
 1d0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <jitter>
		if (ovf_count>=26)
 1d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
 1d8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
 1dc:	4a 97       	sbiw	r24, 0x1a	; 26
 1de:	68 f0       	brcs	.+26     	; 0x1fa <__vector_1+0x96>
		{
			PORTB |=1<<PB1;
 1e0:	c1 9a       	sbi	0x18, 1	; 24

			//cli();
			stop_timer0_ovf();
 1e2:	43 df       	rcall	.-378    	; 0x6a <stop_timer0_ovf>
			
			GIMSK&=~(1<<INT0);
 1e4:	8b b7       	in	r24, 0x3b	; 59
 1e6:	8f 7b       	andi	r24, 0xBF	; 191
 1e8:	8b bf       	out	0x3b, r24	; 59
			sei();
 1ea:	78 94       	sei
			//PORTB |=1<<PB1;
			eeprom_write_byte((BYTE*)0x02, getbestfreq());
 1ec:	7e df       	rcall	.-260    	; 0xea <getbestfreq>
 1ee:	68 2f       	mov	r22, r24
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	61 d0       	rcall	.+194    	; 0x2b8 <eeprom_write_byte>
			
			PORTB |=1<<PB1;
 1f6:	c1 9a       	sbi	0x18, 1	; 24
 1f8:	39 c0       	rjmp	.+114    	; 0x26c <__stack+0xd>
			
			
		}
		else if(ovf_count>=24 )
 1fa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
 1fe:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
 202:	48 97       	sbiw	r24, 0x18	; 24
 204:	98 f1       	brcs	.+102    	; 0x26c <__stack+0xd>
		{
			//diff=val_atteso-TCNT0;
			//prev_diff=diff;
			//if(TCNT0>20)
			high[ptr]=ovf_count-24;
 206:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 20a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
 20e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ee 58       	subi	r30, 0x8E	; 142
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	88 51       	subi	r24, 0x18	; 24
 21a:	80 83       	st	Z, r24
			if(TCNT0>diff_tcnt_count)
 21c:	92 b7       	in	r25, 0x32	; 50
 21e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <diff_tcnt_count>
 222:	89 17       	cp	r24, r25
 224:	48 f4       	brcc	.+18     	; 0x238 <__DATA_REGION_LENGTH__+0x38>
				high[ptr]=TCNT0-105;
 226:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 22a:	82 b7       	in	r24, 0x32	; 50
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ee 58       	subi	r30, 0x8E	; 142
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	89 56       	subi	r24, 0x69	; 105
 234:	80 83       	st	Z, r24
 236:	09 c0       	rjmp	.+18     	; 0x24a <__DATA_REGION_LENGTH__+0x4a>
			else
				high[ptr]=105 - TCNT0;
 238:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 23c:	92 b7       	in	r25, 0x32	; 50
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ee 58       	subi	r30, 0x8E	; 142
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	89 e6       	ldi	r24, 0x69	; 105
 246:	89 1b       	sub	r24, r25
 248:	80 83       	st	Z, r24
			freq[ptr]=a;
 24a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 24e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	e8 59       	subi	r30, 0x98	; 152
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	80 83       	st	Z, r24
			if (ptr<9)
 25a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
 25e:	89 30       	cpi	r24, 0x09	; 9
 260:	28 f4       	brcc	.+10     	; 0x26c <__stack+0xd>
				ptr++;
 262:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ptr>
		//if(OSCCAL>200)
			//PORTB |=1<<PB1;
		
		
		
		contatore=2;
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <contatore>
	}
	if (contatore>1)
 272:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <contatore>
	{
		
	
	}
	
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <main>:

int main(void) 
{


    init_timer0_ovf(); //inziializzo timer0 per ciclo main
 298:	de de       	rcall	.-580    	; 0x56 <init_timer0_ovf>
   
	
	DDRB|=1<<PB1;//led, basso
 29a:	b9 9a       	sbi	0x17, 1	; 23
	PORTB&=~(1<<PB1);
 29c:	c1 98       	cbi	0x18, 1	; 24
	DDRB&=~(1<<PB2);//int 0 input, no PU
 29e:	ba 98       	cbi	0x17, 2	; 23
	PORTB&=~(1<<PB2);
 2a0:	c2 98       	cbi	0x18, 2	; 24
	MCUCR|=(1<<ISC01)|(1<<ISC00); //rising edge di int0
 2a2:	85 b7       	in	r24, 0x35	; 53
 2a4:	83 60       	ori	r24, 0x03	; 3
 2a6:	85 bf       	out	0x35, r24	; 53
	GIMSK|=1<<INT0;  //abilito interrupt su pin0
 2a8:	8b b7       	in	r24, 0x3b	; 59
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	8b bf       	out	0x3b, r24	; 59
	OSCCAL=10;
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	81 bf       	out	0x31, r24	; 49
	start_timer0_ovf(); //start timer interrupt
 2b2:	d7 de       	rcall	.-594    	; 0x62 <start_timer0_ovf>
	sei(); //abilito interrupt globale
 2b4:	78 94       	sei
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <main+0x1e>

000002b8 <eeprom_write_byte>:
 2b8:	26 2f       	mov	r18, r22

000002ba <eeprom_write_r18>:
 2ba:	e1 99       	sbic	0x1c, 1	; 28
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <eeprom_write_r18>
 2be:	1c ba       	out	0x1c, r1	; 28
 2c0:	9f bb       	out	0x1f, r25	; 31
 2c2:	8e bb       	out	0x1e, r24	; 30
 2c4:	2d bb       	out	0x1d, r18	; 29
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	e2 9a       	sbi	0x1c, 2	; 28
 2cc:	e1 9a       	sbi	0x1c, 1	; 28
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
