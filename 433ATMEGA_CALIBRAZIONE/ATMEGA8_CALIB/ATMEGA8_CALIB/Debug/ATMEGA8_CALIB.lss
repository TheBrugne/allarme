
ATMEGA8_CALIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800060  00800060  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000926  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000561  00000000  00000000  00001389  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000211  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000205d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	a2 c0       	rjmp	.+324    	; 0x14a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	33 c0       	rjmp	.+102    	; 0x7a <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ec       	ldi	r30, 0xC4	; 196
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 38       	cpi	r26, 0x86	; 134
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	14 d1       	rcall	.+552    	; 0x282 <main>
  5a:	32 c1       	rjmp	.+612    	; 0x2c0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_timer0_ovf>:
volatile unsigned int jitter=0;
volatile unsigned char a=0;
void init_timer0_ovf(void)
{
	
	TCCR0 =0x00;
  5e:	13 be       	out	0x33, r1	; 51
	TCCR0 |= (1<<CS02);//256,   //prescalare a 8; visto che il master manda una quadra a 5khz=200microsecondi, 1/1MHZ=1microsecondo, mi aspetto che sia tarato quando TCNT0 vale circa 200
  60:	83 b7       	in	r24, 0x33	; 51
  62:	84 60       	ori	r24, 0x04	; 4
  64:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  66:	12 be       	out	0x32, r1	; 50
  68:	08 95       	ret

0000006a <start_timer0_ovf>:
	
}

void start_timer0_ovf(void)
{
	TIMSK |= 1<< TOIE0;    //abilito interrupt sul  ovf zero
  6a:	89 b7       	in	r24, 0x39	; 57
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	89 bf       	out	0x39, r24	; 57
  70:	08 95       	ret

00000072 <stop_timer0_ovf>:
}

void stop_timer0_ovf(void)
{
	TIMSK &= ~(1<< TOIE0);    //abilito interrupt sul  ovf zero
  72:	89 b7       	in	r24, 0x39	; 57
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	89 bf       	out	0x39, r24	; 57
  78:	08 95       	ret

0000007a <__vector_9>:
}


ISR(TIMER0_OVF_vect) //1ms
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
	if (jitter<100)
  88:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
  8c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
  90:	84 36       	cpi	r24, 0x64	; 100
  92:	91 05       	cpc	r25, r1
  94:	48 f4       	brcc	.+18     	; 0xa8 <__vector_9+0x2e>
	jitter++;
  96:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
  9a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <jitter+0x1>
  a4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <jitter>
	TCNT0=0;
  a8:	12 be       	out	0x32, r1	; 50
	ovf_count++;
  aa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
  ae:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ovf_count+0x1>
  b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ovf_count>
	if (ovf_count==50)
  bc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
  c0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
  c4:	c2 97       	sbiw	r24, 0x32	; 50
  c6:	71 f4       	brne	.+28     	; 0xe4 <__vector_9+0x6a>
	{
		contatore=0;
  c8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <contatore>
		a++;
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		OSCCAL=a;
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	81 bf       	out	0x31, r24	; 49
		ovf_count=0;
  dc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ovf_count+0x1>
  e0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ovf_count>
	}
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <getbestfreq>:

unsigned char getbestfreq()
{
  f2:	cf 93       	push	r28
	unsigned int diff= 65535;
	unsigned int loc_diff;
	unsigned char b=0;
	for (int i =0; i<ptr; i++)
  f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
  f8:	88 23       	and	r24, r24
  fa:	f9 f0       	breq	.+62     	; 0x13a <getbestfreq+0x48>
  fc:	a2 e7       	ldi	r26, 0x72	; 114
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	6f ef       	ldi	r22, 0xFF	; 255
 10c:	7f ef       	ldi	r23, 0xFF	; 255
	{
		loc_diff= high[i]*255 + low[i];
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	4d 91       	ld	r20, X+
 112:	81 91       	ld	r24, Z+
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	c4 9f       	mul	r28, r20
 118:	80 0d       	add	r24, r0
 11a:	91 1d       	adc	r25, r1
 11c:	11 24       	eor	r1, r1
		if (loc_diff<diff)
 11e:	86 17       	cp	r24, r22
 120:	97 07       	cpc	r25, r23
 122:	10 f4       	brcc	.+4      	; 0x128 <getbestfreq+0x36>
		{
			diff=loc_diff;
			b=i;
 124:	52 2f       	mov	r21, r18
	for (int i =0; i<ptr; i++)
	{
		loc_diff= high[i]*255 + low[i];
		if (loc_diff<diff)
		{
			diff=loc_diff;
 126:	bc 01       	movw	r22, r24
unsigned char getbestfreq()
{
	unsigned int diff= 65535;
	unsigned int loc_diff;
	unsigned char b=0;
	for (int i =0; i<ptr; i++)
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	28 17       	cp	r18, r24
 134:	39 07       	cpc	r19, r25
 136:	64 f3       	brlt	.-40     	; 0x110 <getbestfreq+0x1e>
 138:	01 c0       	rjmp	.+2      	; 0x13c <getbestfreq+0x4a>

unsigned char getbestfreq()
{
	unsigned int diff= 65535;
	unsigned int loc_diff;
	unsigned char b=0;
 13a:	50 e0       	ldi	r21, 0x00	; 0
		{
			diff=loc_diff;
			b=i;
		}
	}
	return freq[b];
 13c:	e5 2f       	mov	r30, r21
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e8 59       	subi	r30, 0x98	; 152
 142:	ff 4f       	sbci	r31, 0xFF	; 255
}
 144:	80 81       	ld	r24, Z
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <__vector_2>:
ISR(INT1_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	sei();
 16c:	78 94       	sei
	if (contatore==0 && jitter >10)
 16e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <contatore>
 172:	81 11       	cpse	r24, r1
 174:	12 c0       	rjmp	.+36     	; 0x19a <__vector_2+0x50>
 176:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
 17a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
 17e:	0b 97       	sbiw	r24, 0x0b	; 11
 180:	60 f0       	brcs	.+24     	; 0x19a <__vector_2+0x50>
	{
		jitter=0;
 182:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <jitter+0x1>
 186:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <jitter>
		ovf_count=0;
 18a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ovf_count+0x1>
 18e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ovf_count>
		TCNT0=0;
 192:	12 be       	out	0x32, r1	; 50
		contatore=1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <contatore>
	}
	if (contatore==1 && jitter >10)
 19a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <contatore>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <__vector_2+0x5a>
 1a2:	5c c0       	rjmp	.+184    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 1a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <jitter>
 1a8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <jitter+0x1>
 1ac:	0b 97       	sbiw	r24, 0x0b	; 11
 1ae:	08 f4       	brcc	.+2      	; 0x1b2 <__vector_2+0x68>
 1b0:	55 c0       	rjmp	.+170    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		jitter=0;
 1b2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <jitter+0x1>
 1b6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <jitter>
		if (ovf_count>=26)
 1ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
 1be:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
 1c2:	4a 97       	sbiw	r24, 0x1a	; 26
 1c4:	78 f0       	brcs	.+30     	; 0x1e4 <__vector_2+0x9a>
		{
			PORTC |=1<<PC3;
 1c6:	ab 9a       	sbi	0x15, 3	; 21
			PORTB |=1<<PB5;
 1c8:	c5 9a       	sbi	0x18, 5	; 24
			//cli();
			stop_timer0_ovf();
 1ca:	53 df       	rcall	.-346    	; 0x72 <stop_timer0_ovf>
			
			GICR&=~(1<<INT1);
 1cc:	8b b7       	in	r24, 0x3b	; 59
 1ce:	8f 77       	andi	r24, 0x7F	; 127
 1d0:	8b bf       	out	0x3b, r24	; 59
			sei();
 1d2:	78 94       	sei
			//PORTB |=1<<PB1;
			eeprom_write_byte((BYTE*)0x02, getbestfreq());
 1d4:	8e df       	rcall	.-228    	; 0xf2 <getbestfreq>
 1d6:	68 2f       	mov	r22, r24
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	64 d0       	rcall	.+200    	; 0x2a6 <eeprom_write_byte>
			
			PORTC |=1<<PC3;
 1de:	ab 9a       	sbi	0x15, 3	; 21
			PORTB |=1<<PB5;
 1e0:	c5 9a       	sbi	0x18, 5	; 24
 1e2:	39 c0       	rjmp	.+114    	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
			
		}
		else if(ovf_count>=24 )
 1e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
 1e8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
 1ec:	48 97       	sbiw	r24, 0x18	; 24
 1ee:	98 f1       	brcs	.+102    	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
		{
			//diff=val_atteso-TCNT0;
			//prev_diff=diff;
			//if(TCNT0>20)
			high[ptr]=ovf_count-24;
 1f0:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 1f4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ovf_count>
 1f8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ovf_count+0x1>
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 58       	subi	r30, 0x8E	; 142
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	88 51       	subi	r24, 0x18	; 24
 204:	80 83       	st	Z, r24
			if(TCNT0>diff_tcnt_count)
 206:	92 b7       	in	r25, 0x32	; 50
 208:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <diff_tcnt_count>
 20c:	89 17       	cp	r24, r25
 20e:	48 f4       	brcc	.+18     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			high[ptr]=TCNT0-105;
 210:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 214:	82 b7       	in	r24, 0x32	; 50
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ee 58       	subi	r30, 0x8E	; 142
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	89 56       	subi	r24, 0x69	; 105
 21e:	80 83       	st	Z, r24
 220:	09 c0       	rjmp	.+18     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
			else
			high[ptr]=105 - TCNT0;
 222:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 226:	92 b7       	in	r25, 0x32	; 50
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 58       	subi	r30, 0x8E	; 142
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	89 e6       	ldi	r24, 0x69	; 105
 230:	89 1b       	sub	r24, r25
 232:	80 83       	st	Z, r24
			freq[ptr]=a;
 234:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr>
 238:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e8 59       	subi	r30, 0x98	; 152
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	80 83       	st	Z, r24
			if (ptr<9)
 244:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
 248:	89 30       	cpi	r24, 0x09	; 9
 24a:	28 f4       	brcc	.+10     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
			ptr++;
 24c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ptr>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ptr>
		//if(OSCCAL>200)
		//PORTB |=1<<PB1;
		
		
		
		contatore=2;
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <contatore>
	}
	if (contatore>1)
 25c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <contatore>
	{
		
		
	}
	
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <main>:

int main(void) 
{


    init_timer0_ovf(); //inziializzo timer0 per ciclo main
 282:	ed de       	rcall	.-550    	; 0x5e <init_timer0_ovf>
   
	//diventa PB5 sulla board arduino
	DDRC |= 1<<PC3;//led, basso
 284:	a3 9a       	sbi	0x14, 3	; 20
	PORTC &=~ (1<<PC3);
 286:	ab 98       	cbi	0x15, 3	; 21
	DDRB |=1 <<PB5;//led, basso
 288:	bd 9a       	sbi	0x17, 5	; 23
	PORTB &=~ (1<<PB5);
 28a:	c5 98       	cbi	0x18, 5	; 24
	
	
	DDRD &=~ (1<<PD3);//int 1 input, no PU
 28c:	8b 98       	cbi	0x11, 3	; 17
	PORTD &=~ (1<<PD3);
 28e:	93 98       	cbi	0x12, 3	; 18
	MCUCR |= (1<<ISC11)|(1<<ISC10); //rising edge di int1
 290:	85 b7       	in	r24, 0x35	; 53
 292:	8c 60       	ori	r24, 0x0C	; 12
 294:	85 bf       	out	0x35, r24	; 53
	GICR |=1 <<INT1;  //abilito interrupt su pin0
 296:	8b b7       	in	r24, 0x3b	; 59
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	8b bf       	out	0x3b, r24	; 59
	OSCCAL=10;
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	81 bf       	out	0x31, r24	; 49
	start_timer0_ovf(); //start timer interrupt
 2a0:	e4 de       	rcall	.-568    	; 0x6a <start_timer0_ovf>
	sei(); //abilito interrupt globale
 2a2:	78 94       	sei
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <main+0x22>

000002a6 <eeprom_write_byte>:
 2a6:	26 2f       	mov	r18, r22

000002a8 <eeprom_write_r18>:
 2a8:	e1 99       	sbic	0x1c, 1	; 28
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <eeprom_write_r18>
 2ac:	9f bb       	out	0x1f, r25	; 31
 2ae:	8e bb       	out	0x1e, r24	; 30
 2b0:	2d bb       	out	0x1d, r18	; 29
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	e2 9a       	sbi	0x1c, 2	; 28
 2b8:	e1 9a       	sbi	0x1c, 1	; 28
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
