
ATMEGA8_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  000007aa  0000083e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000081  00800160  00800160  0000093e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000009b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000134e  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a25  00000000  00000000  000026e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  0000310c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fb  00000000  00000000  00003a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	ca c2       	rjmp	.+1428   	; 0x5a8 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	0b c3       	rjmp	.+1558   	; 0x630 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 3e       	cpi	r26, 0xE1	; 225
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	48 d3       	rcall	.+1680   	; 0x6ea <main>
  5a:	a5 c3       	rjmp	.+1866   	; 0x7a6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_timer1_compare>:
    {
        lenght++;
        _string++;
    }
    return lenght;
}
  5e:	1f bc       	out	0x2f, r1	; 47
  60:	8e b5       	in	r24, 0x2e	; 46
  62:	89 60       	ori	r24, 0x09	; 9
  64:	8e bd       	out	0x2e, r24	; 46
  66:	08 95       	ret

00000068 <start_timer1_compareA>:
  68:	89 b7       	in	r24, 0x39	; 57
  6a:	80 61       	ori	r24, 0x10	; 16
  6c:	89 bf       	out	0x39, r24	; 57
  6e:	08 95       	ret

00000070 <init_timer0_ovf>:
  70:	13 be       	out	0x33, r1	; 51
  72:	83 b7       	in	r24, 0x33	; 51
  74:	85 60       	ori	r24, 0x05	; 5
  76:	83 bf       	out	0x33, r24	; 51
  78:	84 e6       	ldi	r24, 0x64	; 100
  7a:	82 bf       	out	0x32, r24	; 50
  7c:	08 95       	ret

0000007e <start_timer0_ovf>:
  7e:	89 b7       	in	r24, 0x39	; 57
  80:	81 60       	ori	r24, 0x01	; 1
  82:	89 bf       	out	0x39, r24	; 57
  84:	08 95       	ret

00000086 <digitalWrite>:
  86:	88 30       	cpi	r24, 0x08	; 8
  88:	f8 f0       	brcs	.+62     	; 0xc8 <digitalWrite+0x42>
  8a:	66 23       	and	r22, r22
  8c:	71 f0       	breq	.+28     	; 0xaa <digitalWrite+0x24>
  8e:	48 b3       	in	r20, 0x18	; 24
  90:	87 70       	andi	r24, 0x07	; 7
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	b9 01       	movw	r22, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <digitalWrite+0x18>
  9a:	66 0f       	add	r22, r22
  9c:	77 1f       	adc	r23, r23
  9e:	8a 95       	dec	r24
  a0:	e2 f7       	brpl	.-8      	; 0x9a <digitalWrite+0x14>
  a2:	cb 01       	movw	r24, r22
  a4:	84 2b       	or	r24, r20
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	08 95       	ret
  aa:	48 b3       	in	r20, 0x18	; 24
  ac:	87 70       	andi	r24, 0x07	; 7
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	b9 01       	movw	r22, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <digitalWrite+0x34>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <digitalWrite+0x30>
  be:	cb 01       	movw	r24, r22
  c0:	80 95       	com	r24
  c2:	84 23       	and	r24, r20
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	08 95       	ret
  c8:	66 23       	and	r22, r22
  ca:	71 f0       	breq	.+28     	; 0xe8 <digitalWrite+0x62>
  cc:	42 b3       	in	r20, 0x12	; 18
  ce:	87 70       	andi	r24, 0x07	; 7
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	b9 01       	movw	r22, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <digitalWrite+0x56>
  d8:	66 0f       	add	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	8a 95       	dec	r24
  de:	e2 f7       	brpl	.-8      	; 0xd8 <digitalWrite+0x52>
  e0:	cb 01       	movw	r24, r22
  e2:	84 2b       	or	r24, r20
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	08 95       	ret
  e8:	42 b3       	in	r20, 0x12	; 18
  ea:	87 70       	andi	r24, 0x07	; 7
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	b9 01       	movw	r22, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <digitalWrite+0x72>
  f4:	66 0f       	add	r22, r22
  f6:	77 1f       	adc	r23, r23
  f8:	8a 95       	dec	r24
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <digitalWrite+0x6e>
  fc:	cb 01       	movw	r24, r22
  fe:	80 95       	com	r24
 100:	84 23       	and	r24, r20
 102:	82 bb       	out	0x12, r24	; 18
 104:	08 95       	ret

00000106 <pinMode>:
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	f8 f0       	brcs	.+62     	; 0x148 <pinMode+0x42>
 10a:	66 23       	and	r22, r22
 10c:	71 f0       	breq	.+28     	; 0x12a <pinMode+0x24>
 10e:	47 b3       	in	r20, 0x17	; 23
 110:	87 70       	andi	r24, 0x07	; 7
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <pinMode+0x18>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <pinMode+0x14>
 122:	cb 01       	movw	r24, r22
 124:	84 2b       	or	r24, r20
 126:	87 bb       	out	0x17, r24	; 23
 128:	08 95       	ret
 12a:	47 b3       	in	r20, 0x17	; 23
 12c:	87 70       	andi	r24, 0x07	; 7
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <pinMode+0x34>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <pinMode+0x30>
 13e:	cb 01       	movw	r24, r22
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	87 bb       	out	0x17, r24	; 23
 146:	08 95       	ret
 148:	66 23       	and	r22, r22
 14a:	71 f0       	breq	.+28     	; 0x168 <pinMode+0x62>
 14c:	41 b3       	in	r20, 0x11	; 17
 14e:	87 70       	andi	r24, 0x07	; 7
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <pinMode+0x56>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <pinMode+0x52>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret
 168:	41 b3       	in	r20, 0x11	; 17
 16a:	87 70       	andi	r24, 0x07	; 7
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <pinMode+0x72>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <pinMode+0x6e>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret

00000186 <baud_setup>:
 186:	9c 01       	movw	r18, r24
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	60 e2       	ldi	r22, 0x20	; 32
 18e:	71 ea       	ldi	r23, 0xA1	; 161
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	c0 d2       	rcall	.+1408   	; 0x716 <__udivmodsi4>
 196:	83 2f       	mov	r24, r19
 198:	99 27       	eor	r25, r25
 19a:	8b bd       	out	0x2b, r24	; 43
 19c:	2a bd       	out	0x2a, r18	; 42
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <tx_pin>
 1a4:	b0 df       	rcall	.-160    	; 0x106 <pinMode>
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <rx_pin>
 1ac:	ac df       	rcall	.-168    	; 0x106 <pinMode>
 1ae:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <tx_busy>
 1b2:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <rx_busy>
 1b6:	08 95       	ret

000001b8 <digitalRead>:
 1b8:	88 30       	cpi	r24, 0x08	; 8
 1ba:	60 f0       	brcs	.+24     	; 0x1d4 <digitalRead+0x1c>
 1bc:	26 b3       	in	r18, 0x16	; 22
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	87 70       	andi	r24, 0x07	; 7
 1c2:	a9 01       	movw	r20, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <digitalRead+0x12>
 1c6:	55 95       	asr	r21
 1c8:	47 95       	ror	r20
 1ca:	8a 95       	dec	r24
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <digitalRead+0xe>
 1ce:	ca 01       	movw	r24, r20
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	08 95       	ret
 1d4:	20 b3       	in	r18, 0x10	; 16
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	87 70       	andi	r24, 0x07	; 7
 1da:	a9 01       	movw	r20, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <digitalRead+0x2a>
 1de:	55 95       	asr	r21
 1e0:	47 95       	ror	r20
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <digitalRead+0x26>
 1e6:	ca 01       	movw	r24, r20
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	08 95       	ret

000001ec <set_rx_pin>:
 1ec:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <rx_pin>
 1f0:	08 95       	ret

000001f2 <tx_stop>:
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <tx_pin>
 1f8:	46 df       	rcall	.-372    	; 0x86 <digitalWrite>
 1fa:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <tx_busy>
 1fe:	08 95       	ret

00000200 <rx_start>:
 200:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <rx_busy>
 204:	81 11       	cpse	r24, r1
 206:	1d c0       	rjmp	.+58     	; 0x242 <rx_start+0x42>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <rx_busy>
 20e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <rx_done>
 212:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <n_campioni>
 216:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <n_bit_alti>
 21a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
 21e:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <header>
 222:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <data_bit>
 226:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <data_bit+0x1>
 22a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <data_bit+0x2>
 22e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <data_bit+0x3>
 232:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <data_bit+0x4>
 236:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <data_bit+0x5>
 23a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <data_bit+0x6>
 23e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <data_bit+0x7>
 242:	08 95       	ret

00000244 <is_timer10ms_expired>:
 244:	e8 2f       	mov	r30, r24
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	eb 57       	subi	r30, 0x7B	; 123
 24e:	fe 4f       	sbci	r31, 0xFE	; 254
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	20 81       	ld	r18, Z
 254:	31 81       	ldd	r19, Z+1	; 0x01
 256:	23 2b       	or	r18, r19
 258:	09 f0       	breq	.+2      	; 0x25c <is_timer10ms_expired+0x18>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret

0000025e <set_timer10ms>:
 25e:	e8 2f       	mov	r30, r24
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	eb 57       	subi	r30, 0x7B	; 123
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	71 83       	std	Z+1, r23	; 0x01
 26c:	60 83       	st	Z, r22
 26e:	08 95       	ret

00000270 <crc_calc_bytearray>:

BYTE crc_calc_bytearray(BYTE* array_to_transmit, BYTE length)
{
	BYTE crc =0x00;
	
	while (length--)
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	26 0f       	add	r18, r22
 274:	66 23       	and	r22, r22
 276:	69 f0       	breq	.+26     	; 0x292 <crc_calc_bytearray+0x22>
 278:	a8 2f       	mov	r26, r24
 27a:	b9 2f       	mov	r27, r25
 27c:	80 e0       	ldi	r24, 0x00	; 0
	{
		crc= crc8_table[crc ^ *array_to_transmit++];
 27e:	ed 91       	ld	r30, X+
 280:	8e 27       	eor	r24, r30
 282:	e8 2f       	mov	r30, r24
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	e0 5a       	subi	r30, 0xA0	; 160
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	80 81       	ld	r24, Z

BYTE crc_calc_bytearray(BYTE* array_to_transmit, BYTE length)
{
	BYTE crc =0x00;
	
	while (length--)
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	b8 f7       	brcc	.-18     	; 0x27e <crc_calc_bytearray+0xe>
 290:	08 95       	ret
}*/


BYTE crc_calc_bytearray(BYTE* array_to_transmit, BYTE length)
{
	BYTE crc =0x00;
 292:	80 e0       	ldi	r24, 0x00	; 0
		crc= crc8_table[crc ^ *array_to_transmit++];
		
	}
	return crc;

}
 294:	08 95       	ret

00000296 <filtra_messaggio>:
    }
}


void filtra_messaggio(BYTE bit_rx)
{
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	27 97       	sbiw	r28, 0x07	; 7
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61

	n_3bit++;
 2c0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <n_3bit>
 2c4:	9f 5f       	subi	r25, 0xFF	; 255
 2c6:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <n_3bit>
	if (bit_rx)
 2ca:	88 23       	and	r24, r24
 2cc:	31 f0       	breq	.+12     	; 0x2da <filtra_messaggio+0x44>
		n_3bit_alti++;
 2ce:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <n_3bit_alti>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <n_3bit_alti>
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <filtra_messaggio+0x4e>
	else
		n_3bit_bassi++;
 2da:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <n_3bit_bassi>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <n_3bit_bassi>
	if (n_3bit==2)
 2e4:	92 30       	cpi	r25, 0x02	; 2
 2e6:	09 f0       	breq	.+2      	; 0x2ea <filtra_messaggio+0x54>
 2e8:	df c0       	rjmp	.+446    	; 0x4a8 <__stack+0x49>
	{
		n_3bit=0;
 2ea:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <n_3bit>
		if (n_3bit_alti>0)
 2ee:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <n_3bit_alti>
			bit_rx=1;
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	81 11       	cpse	r24, r1
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <filtra_messaggio+0x64>
 2f8:	90 e0       	ldi	r25, 0x00	; 0
		else
			bit_rx=0;
		n_3bit_alti=0;
 2fa:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <n_3bit_alti>
		n_3bit_bassi=0;
 2fe:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <n_3bit_bassi>
	  //  digitalWrite(13, TRUE);
		// Integrate each sample
		if (bit_rx)
 302:	88 23       	and	r24, r24
 304:	29 f0       	breq	.+10     	; 0x310 <filtra_messaggio+0x7a>
		n_bit_alti++;
 306:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <n_bit_alti>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <n_bit_alti>

		if (bit_rx != previous_bit)
 310:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <previous_bit>
 314:	89 17       	cp	r24, r25
 316:	69 f0       	breq	.+26     	; 0x332 <filtra_messaggio+0x9c>
		{
		// Transition, advance if ramp > 80, retard if < 80
		rampa += ((rampa < RAMP_HALF) 
 318:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <rampa>
 31c:	80 35       	cpi	r24, 0x50	; 80
 31e:	10 f0       	brcs	.+4      	; 0x324 <filtra_messaggio+0x8e>
 320:	2d e1       	ldi	r18, 0x1D	; 29
 322:	01 c0       	rjmp	.+2      	; 0x326 <filtra_messaggio+0x90>
 324:	2b e0       	ldi	r18, 0x0B	; 11
 326:	82 0f       	add	r24, r18
 328:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <rampa>
				   ? RAMP_RIT 
				   : RAMP_ANT);
		previous_bit = bit_rx;
 32c:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <previous_bit>
 330:	05 c0       	rjmp	.+10     	; 0x33c <filtra_messaggio+0xa6>
		}
		else
		{
		// No transition
		// Advance ramp by standard 20 (== 160/8 samples)
		rampa += RAMP_DEF;
 332:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <rampa>
 336:	8c 5e       	subi	r24, 0xEC	; 236
 338:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <rampa>
		}
		if (rampa >= RAMP_MAX)
 33c:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <rampa>
 340:	e0 3a       	cpi	r30, 0xA0	; 160
 342:	08 f4       	brcc	.+2      	; 0x346 <filtra_messaggio+0xb0>
 344:	b1 c0       	rjmp	.+354    	; 0x4a8 <__stack+0x49>
		{
			// Add this to the 12th bit of vw_rx_bits, LSB first
			// The last 12 bits are kept
			data_bit >>= 1;
 346:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <data_bit>
 34a:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <data_bit+0x1>
 34e:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <data_bit+0x2>
 352:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <data_bit+0x3>
 356:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <data_bit+0x4>
 35a:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <data_bit+0x5>
 35e:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <data_bit+0x6>
 362:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <data_bit+0x7>
 366:	01 e0       	ldi	r16, 0x01	; 1
 368:	fa d1       	rcall	.+1012   	; 0x75e <__lshrdi3>
 36a:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <data_bit>
 36e:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <data_bit+0x1>
 372:	40 93 8b 01 	sts	0x018B, r20	; 0x80018b <data_bit+0x2>
 376:	50 93 8c 01 	sts	0x018C, r21	; 0x80018c <data_bit+0x3>
 37a:	60 93 8d 01 	sts	0x018D, r22	; 0x80018d <data_bit+0x4>
 37e:	70 93 8e 01 	sts	0x018E, r23	; 0x80018e <data_bit+0x5>
 382:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <data_bit+0x6>
 386:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <data_bit+0x7>

			// Check the integrator to see how many samples in this cycle were high.
			// If < 5 out of 8, then its declared a 0 bit, else a 1;
			if (n_bit_alti >= 5)
 38a:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <n_bit_alti>
 38e:	f5 30       	cpi	r31, 0x05	; 5
 390:	18 f0       	brcs	.+6      	; 0x398 <filtra_messaggio+0x102>
			 data_bit |= 0x8000000000000000;
 392:	90 68       	ori	r25, 0x80	; 128
 394:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <data_bit+0x7>

			rampa -= RAMP_MAX;
 398:	e0 5a       	subi	r30, 0xA0	; 160
 39a:	e0 93 d4 01 	sts	0x01D4, r30	; 0x8001d4 <rampa>
			n_bit_alti = 0; // Clear the integral for the next cycle
 39e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <n_bit_alti>

			
		// Not in a message, see if we have a start symbol
			 if ((WORD)data_bit==0xA160)//start byte
 3a2:	80 90 89 01 	lds	r8, 0x0189	; 0x800189 <data_bit>
 3a6:	90 90 8a 01 	lds	r9, 0x018A	; 0x80018a <data_bit+0x1>
 3aa:	a0 90 8b 01 	lds	r10, 0x018B	; 0x80018b <data_bit+0x2>
 3ae:	b0 90 8c 01 	lds	r11, 0x018C	; 0x80018c <data_bit+0x3>
 3b2:	c0 90 8d 01 	lds	r12, 0x018D	; 0x80018d <data_bit+0x4>
 3b6:	d0 90 8e 01 	lds	r13, 0x018E	; 0x80018e <data_bit+0x5>
 3ba:	e0 90 8f 01 	lds	r14, 0x018F	; 0x80018f <data_bit+0x6>
 3be:	f0 90 90 01 	lds	r15, 0x0190	; 0x800190 <data_bit+0x7>
 3c2:	80 e6       	ldi	r24, 0x60	; 96
 3c4:	88 16       	cp	r8, r24
 3c6:	81 ea       	ldi	r24, 0xA1	; 161
 3c8:	98 06       	cpc	r9, r24
 3ca:	09 f0       	breq	.+2      	; 0x3ce <filtra_messaggio+0x138>
 3cc:	6d c0       	rjmp	.+218    	; 0x4a8 <__stack+0x49>
			{
				
				BYTE trash[7]= {(BYTE)data_bit, (BYTE)(data_bit>>8),(BYTE)(data_bit>>16), (BYTE)(data_bit>>24), (BYTE)(data_bit>>32), (BYTE)(data_bit>>40), (BYTE)(data_bit>>48) };
 3ce:	89 82       	std	Y+1, r8	; 0x01
 3d0:	28 2d       	mov	r18, r8
 3d2:	39 2d       	mov	r19, r9
 3d4:	4a 2d       	mov	r20, r10
 3d6:	5b 2d       	mov	r21, r11
 3d8:	6c 2d       	mov	r22, r12
 3da:	7d 2d       	mov	r23, r13
 3dc:	8e 2d       	mov	r24, r14
 3de:	9f 2d       	mov	r25, r15
 3e0:	08 e0       	ldi	r16, 0x08	; 8
 3e2:	bd d1       	rcall	.+890    	; 0x75e <__lshrdi3>
 3e4:	2a 83       	std	Y+2, r18	; 0x02
 3e6:	28 2d       	mov	r18, r8
 3e8:	39 2d       	mov	r19, r9
 3ea:	4a 2d       	mov	r20, r10
 3ec:	5b 2d       	mov	r21, r11
 3ee:	6c 2d       	mov	r22, r12
 3f0:	7d 2d       	mov	r23, r13
 3f2:	8e 2d       	mov	r24, r14
 3f4:	9f 2d       	mov	r25, r15
 3f6:	00 e1       	ldi	r16, 0x10	; 16
 3f8:	b2 d1       	rcall	.+868    	; 0x75e <__lshrdi3>
 3fa:	2b 83       	std	Y+3, r18	; 0x03
 3fc:	28 2d       	mov	r18, r8
 3fe:	39 2d       	mov	r19, r9
 400:	4a 2d       	mov	r20, r10
 402:	5b 2d       	mov	r21, r11
 404:	6c 2d       	mov	r22, r12
 406:	7d 2d       	mov	r23, r13
 408:	8e 2d       	mov	r24, r14
 40a:	9f 2d       	mov	r25, r15
 40c:	08 e1       	ldi	r16, 0x18	; 24
 40e:	a7 d1       	rcall	.+846    	; 0x75e <__lshrdi3>
 410:	2c 83       	std	Y+4, r18	; 0x04
 412:	28 2d       	mov	r18, r8
 414:	39 2d       	mov	r19, r9
 416:	4a 2d       	mov	r20, r10
 418:	5b 2d       	mov	r21, r11
 41a:	6c 2d       	mov	r22, r12
 41c:	7d 2d       	mov	r23, r13
 41e:	8e 2d       	mov	r24, r14
 420:	9f 2d       	mov	r25, r15
 422:	00 e2       	ldi	r16, 0x20	; 32
 424:	9c d1       	rcall	.+824    	; 0x75e <__lshrdi3>
 426:	12 2f       	mov	r17, r18
 428:	2d 83       	std	Y+5, r18	; 0x05
 42a:	28 2d       	mov	r18, r8
 42c:	39 2d       	mov	r19, r9
 42e:	4a 2d       	mov	r20, r10
 430:	5b 2d       	mov	r21, r11
 432:	6c 2d       	mov	r22, r12
 434:	7d 2d       	mov	r23, r13
 436:	8e 2d       	mov	r24, r14
 438:	9f 2d       	mov	r25, r15
 43a:	08 e2       	ldi	r16, 0x28	; 40
 43c:	90 d1       	rcall	.+800    	; 0x75e <__lshrdi3>
 43e:	72 2e       	mov	r7, r18
 440:	2e 83       	std	Y+6, r18	; 0x06
 442:	28 2d       	mov	r18, r8
 444:	39 2d       	mov	r19, r9
 446:	4a 2d       	mov	r20, r10
 448:	5b 2d       	mov	r21, r11
 44a:	6c 2d       	mov	r22, r12
 44c:	7d 2d       	mov	r23, r13
 44e:	8e 2d       	mov	r24, r14
 450:	9f 2d       	mov	r25, r15
 452:	00 e3       	ldi	r16, 0x30	; 48
 454:	84 d1       	rcall	.+776    	; 0x75e <__lshrdi3>
 456:	02 2f       	mov	r16, r18
 458:	2f 83       	std	Y+7, r18	; 0x07
				BYTE crc = crc_calc_bytearray(&trash[0], HEADER_LENGTH+ MESSAGE_LENGTH);
 45a:	64 e0       	ldi	r22, 0x04	; 4
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	07 df       	rcall	.-498    	; 0x270 <crc_calc_bytearray>
				if (crc== trash[4] && trash[5]==0x7E && trash[6]==0x0F  )
 462:	18 13       	cpse	r17, r24
 464:	21 c0       	rjmp	.+66     	; 0x4a8 <__stack+0x49>
 466:	8e e7       	ldi	r24, 0x7E	; 126
 468:	78 12       	cpse	r7, r24
 46a:	1e c0       	rjmp	.+60     	; 0x4a8 <__stack+0x49>
 46c:	0f 30       	cpi	r16, 0x0F	; 15
 46e:	e1 f4       	brne	.+56     	; 0x4a8 <__stack+0x49>
				{
					digitalWrite(13, TRUE);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	8d e0       	ldi	r24, 0x0D	; 13
 474:	08 de       	rcall	.-1008   	; 0x86 <digitalWrite>
        return 1;
}

void set_timer10ms(BYTE timer, WORD value)
{
    timer_10ms_array[timer]= value;
 476:	84 ef       	ldi	r24, 0xF4	; 244
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <timer_10ms_array+0x1>
 47e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timer_10ms_array>
				BYTE crc = crc_calc_bytearray(&trash[0], HEADER_LENGTH+ MESSAGE_LENGTH);
				if (crc== trash[4] && trash[5]==0x7E && trash[6]==0x0F  )
				{
					digitalWrite(13, TRUE);
					set_timer10ms(TIMER_10MS_STOP_RX,TIME_10ms_5s);
					rx_busy= FALSE; //cosi non faccio + nulla nell'interupt e resetto data_bit
 482:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <rx_busy>
 486:	fe 01       	movw	r30, r28
 488:	31 96       	adiw	r30, 0x01	; 1
 48a:	a5 e9       	ldi	r26, 0x95	; 149
 48c:	b1 e0       	ldi	r27, 0x01	; 1
 48e:	9e 01       	movw	r18, r28
 490:	28 5f       	subi	r18, 0xF8	; 248
 492:	3f 4f       	sbci	r19, 0xFF	; 255
					
					//riempio buffer di trasmissione verso raspberry
					for (int i=0; i<7; i++)
					{
						buff_to_raspberry[i]= trash[i];
 494:	81 91       	ld	r24, Z+
 496:	8d 93       	st	X+, r24
					digitalWrite(13, TRUE);
					set_timer10ms(TIMER_10MS_STOP_RX,TIME_10ms_5s);
					rx_busy= FALSE; //cosi non faccio + nulla nell'interupt e resetto data_bit
					
					//riempio buffer di trasmissione verso raspberry
					for (int i=0; i<7; i++)
 498:	e2 17       	cp	r30, r18
 49a:	f3 07       	cpc	r31, r19
 49c:	d9 f7       	brne	.-10     	; 0x494 <__stack+0x35>
					{
						buff_to_raspberry[i]= trash[i];
					}
					//attivo interrupt
					packet_to_raspberry=5;
 49e:	85 e0       	ldi	r24, 0x05	; 5
 4a0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <packet_to_raspberry>
					BYTE dummy= UDR;//svuoto buffer
 4a4:	8c b1       	in	r24, 0x0c	; 12
					UCSRB |=1<<UDRIE;
 4a6:	55 9a       	sbi	0x0a, 5	; 10
       
		}
	
	}
 
}
 4a8:	27 96       	adiw	r28, 0x07	; 7
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	af 90       	pop	r10
 4c8:	9f 90       	pop	r9
 4ca:	8f 90       	pop	r8
 4cc:	7f 90       	pop	r7
 4ce:	08 95       	ret

000004d0 <__vector_6>:
#include "funzioni433.h"
#include "brugne433.h"
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect)
{
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31

     bit_ricevuto = digitalRead(rx_pin);
 4f2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <rx_pin>
 4f6:	60 de       	rcall	.-832    	; 0x1b8 <digitalRead>
 4f8:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <bit_ricevuto>

    // Do transmitter stuff first to reduce transmitter bit jitter due 
    // to variable receiver processing
    if (tx_busy && bit_inviato++ == 0) // al primo bit entro qui, poi per 7 volte di fila faccio solo il ++ dentro if (cioè spedisco 8 bit)
 4fc:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <tx_busy>
 500:	88 23       	and	r24, r24
 502:	81 f1       	breq	.+96     	; 0x564 <__vector_6+0x94>
 504:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <bit_inviato>
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	98 0f       	add	r25, r24
 50c:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <bit_inviato>
 510:	81 11       	cpse	r24, r1
 512:	28 c0       	rjmp	.+80     	; 0x564 <__vector_6+0x94>
    {
       
      if (tx_index >= msg_length)  // messaggio finito
 514:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <tx_index>
 518:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <msg_length>
 51c:	e8 17       	cp	r30, r24
 51e:	10 f0       	brcs	.+4      	; 0x524 <__vector_6+0x54>
	       tx_stop();
 520:	68 de       	rcall	.-816    	; 0x1f2 <tx_stop>
 522:	20 c0       	rjmp	.+64     	; 0x564 <__vector_6+0x94>
		
        else
        {
		//digitalWrite(13, TRUE);
			
	        digitalWrite(tx_pin, (buffer_dati[tx_index] & (1<<campioni_8_bit))); //metto un bit del byte in posizione tx_index in uscita
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	00 90 da 01 	lds	r0, 0x01DA	; 0x8001da <campioni_8_bit>
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__vector_6+0x62>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <__vector_6+0x5e>
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	e7 59       	subi	r30, 0x97	; 151
 53a:	fe 4f       	sbci	r31, 0xFE	; 254
 53c:	80 81       	ld	r24, Z
 53e:	68 23       	and	r22, r24
 540:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <tx_pin>
 544:	a0 dd       	rcall	.-1216   	; 0x86 <digitalWrite>
			campioni_8_bit++;
 546:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <campioni_8_bit>
 54a:	8f 5f       	subi	r24, 0xFF	; 255
			else
			merda &=~(1<<a);
		if (tx_index==1 && merda== 0x06)	digitalWrite(13, TRUE);
		*/
			
	        if (campioni_8_bit > 7) //all'ottavo ciclo, ho su digitalwritye l'ultimo bit del byte, ed eseguo questo if, cioè passo al prossimo byte
 54c:	88 30       	cpi	r24, 0x08	; 8
 54e:	18 f4       	brcc	.+6      	; 0x556 <__vector_6+0x86>
        else
        {
		//digitalWrite(13, TRUE);
			
	        digitalWrite(tx_pin, (buffer_dati[tx_index] & (1<<campioni_8_bit))); //metto un bit del byte in posizione tx_index in uscita
			campioni_8_bit++;
 550:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <campioni_8_bit>
 554:	07 c0       	rjmp	.+14     	; 0x564 <__vector_6+0x94>
		*/
			
	        if (campioni_8_bit > 7) //all'ottavo ciclo, ho su digitalwritye l'ultimo bit del byte, ed eseguo questo if, cioè passo al prossimo byte
	        {
			
	            campioni_8_bit = 0;
 556:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <campioni_8_bit>
                tx_index++;
 55a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <tx_index>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <tx_index>
	        }
        }
    }
    if (bit_inviato > 7)
 564:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <bit_inviato>
 568:	88 30       	cpi	r24, 0x08	; 8
 56a:	10 f0       	brcs	.+4      	; 0x570 <__vector_6+0xa0>
	{

	
	bit_inviato= 0; //spedisco nuovo bit dopo 8 cicli di interrupt
 56c:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <bit_inviato>
	//digitalWrite(13, TRUE);
	}

    if (rx_busy && !tx_busy) //se sono un ricevitore, filtro il bit in ingresso. ( verifico quanti degli 8 bit hanno lo stesso valore)
 570:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <rx_busy>
 574:	88 23       	and	r24, r24
 576:	39 f0       	breq	.+14     	; 0x586 <__vector_6+0xb6>
 578:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <tx_busy>
 57c:	81 11       	cpse	r24, r1
 57e:	03 c0       	rjmp	.+6      	; 0x586 <__vector_6+0xb6>
        filtra_messaggio(bit_ricevuto);
 580:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <bit_ricevuto>
 584:	88 de       	rcall	.-752    	; 0x296 <filtra_messaggio>

}
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31

	TCNT0=100;
 5d2:	84 e6       	ldi	r24, 0x64	; 100
 5d4:	82 bf       	out	0x32, r24	; 50
    sei();
 5d6:	78 94       	sei
 5d8:	c5 e8       	ldi	r28, 0x85	; 133
 5da:	d1 e0       	ldi	r29, 0x01	; 1
 5dc:	09 e8       	ldi	r16, 0x89	; 137
 5de:	11 e0       	ldi	r17, 0x01	; 1
    for(int i=0; i<MAX_TIMER_10MS; i++)
    {
        if (timer_10ms_array[i]>0)
 5e0:	88 81       	ld	r24, Y
 5e2:	99 81       	ldd	r25, Y+1	; 0x01
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	19 f0       	breq	.+6      	; 0x5ee <__vector_9+0x46>
            timer_10ms_array[i]--;
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	99 83       	std	Y+1, r25	; 0x01
 5ec:	88 83       	st	Y, r24
		if (packet_to_raspberry && is_timer10ms_expired(TIMER_10MS_PAUSE_TX))
 5ee:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <packet_to_raspberry>
 5f2:	88 23       	and	r24, r24
 5f4:	21 f0       	breq	.+8      	; 0x5fe <__vector_9+0x56>
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	25 de       	rcall	.-950    	; 0x244 <is_timer10ms_expired>
 5fa:	81 11       	cpse	r24, r1
			UCSRB |=1<<UDRIE; 
 5fc:	55 9a       	sbi	0x0a, 5	; 10
 5fe:	22 96       	adiw	r28, 0x02	; 2
ISR(TIMER0_OVF_vect)
{

	TCNT0=100;
    sei();
    for(int i=0; i<MAX_TIMER_10MS; i++)
 600:	c0 17       	cp	r28, r16
 602:	d1 07       	cpc	r29, r17
 604:	69 f7       	brne	.-38     	; 0x5e0 <__vector_9+0x38>
			UCSRB |=1<<UDRIE; 
    }

    //parte iniziale gestione bottone
 
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <__vector_12>:
ISR(USART_UDRE_vect)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	UDR = buff_to_raspberry[ptr_to_buff_raspberry];
 652:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <ptr_to_buff_raspberry>
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	eb 56       	subi	r30, 0x6B	; 107
 65a:	fe 4f       	sbci	r31, 0xFE	; 254
 65c:	80 81       	ld	r24, Z
 65e:	8c b9       	out	0x0c, r24	; 12
	ptr_to_buff_raspberry++;
 660:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <ptr_to_buff_raspberry>
 664:	8f 5f       	subi	r24, 0xFF	; 255
	if (ptr_to_buff_raspberry>6)
 666:	87 30       	cpi	r24, 0x07	; 7
 668:	18 f4       	brcc	.+6      	; 0x670 <__vector_12+0x40>
 
}
ISR(USART_UDRE_vect)
{
	UDR = buff_to_raspberry[ptr_to_buff_raspberry];
	ptr_to_buff_raspberry++;
 66a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <ptr_to_buff_raspberry>
 66e:	0c c0       	rjmp	.+24     	; 0x688 <__vector_12+0x58>
	if (ptr_to_buff_raspberry>6)
	{
		ptr_to_buff_raspberry=0;
 670:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ptr_to_buff_raspberry>
		packet_to_raspberry--;
 674:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <packet_to_raspberry>
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <packet_to_raspberry>
		//if (!packet_to_raspberry)
		//UCSRB &=~(1<<UDRIE);
		UCSRB &=~(1<<UDRIE);
 67e:	55 98       	cbi	0x0a, 5	; 10
		set_timer10ms(TIMER_10MS_PAUSE_TX, TIME_10ms_01s);
 680:	6a e0       	ldi	r22, 0x0A	; 10
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	eb dd       	rcall	.-1066   	; 0x25e <set_timer10ms>
	}
 688:	ff 91       	pop	r31
 68a:	ef 91       	pop	r30
 68c:	bf 91       	pop	r27
 68e:	af 91       	pop	r26
 690:	9f 91       	pop	r25
 692:	8f 91       	pop	r24
 694:	7f 91       	pop	r23
 696:	6f 91       	pop	r22
 698:	5f 91       	pop	r21
 69a:	4f 91       	pop	r20
 69c:	3f 91       	pop	r19
 69e:	2f 91       	pop	r18
 6a0:	0f 90       	pop	r0
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	0f 90       	pop	r0
 6a6:	1f 90       	pop	r1
 6a8:	18 95       	reti

000006aa <main_loop>:


int main_loop(void) 
{
 
	n_3bit=0;
 6aa:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <n_3bit>
	n_3bit_bassi=0;
 6ae:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <n_3bit_bassi>
	n_3bit_alti=0;
 6b2:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <n_3bit_alti>
	pinMode(13, OUTPUT);
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	8d e0       	ldi	r24, 0x0D	; 13
 6ba:	25 dd       	rcall	.-1462   	; 0x106 <pinMode>
	digitalWrite(13, FALSE);
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	8d e0       	ldi	r24, 0x0D	; 13
 6c0:	e2 dc       	rcall	.-1596   	; 0x86 <digitalWrite>
	pinMode(0, OUTPUT);
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	1f dd       	rcall	.-1474   	; 0x106 <pinMode>
	digitalWrite(0, TRUE); //tengo alta linea TX
 6c8:	61 e0       	ldi	r22, 0x01	; 1
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	dc dc       	rcall	.-1608   	; 0x86 <digitalWrite>
	set_timer10ms(TIMER_10MS_STOP_RX,0);
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	c4 dd       	rcall	.-1144   	; 0x25e <set_timer10ms>
	packet_to_raspberry=0;
 6d6:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <packet_to_raspberry>
	ptr_to_buff_raspberry=0;
 6da:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ptr_to_buff_raspberry>
    while (1)
    {
		if (is_timer10ms_expired(TIMER_10MS_STOP_RX))
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	b1 dd       	rcall	.-1182   	; 0x244 <is_timer10ms_expired>
 6e2:	88 23       	and	r24, r24
 6e4:	e1 f3       	breq	.-8      	; 0x6de <main_loop+0x34>
			rx_start();
 6e6:	8c dd       	rcall	.-1256   	; 0x200 <rx_start>
 6e8:	fa cf       	rjmp	.-12     	; 0x6de <main_loop+0x34>

000006ea <main>:
#define RICEVITORE

int main(void) 
{
	
    UBRRH = (unsigned char)(UBRR_VALUE>>8);
 6ea:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char)UBRR_VALUE;
 6ec:	8f ec       	ldi	r24, 0xCF	; 207
 6ee:	89 b9       	out	0x09, r24	; 9
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSRB |= (1<<TXEN);
 6f0:	53 9a       	sbi	0x0a, 3	; 10
    UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 6f2:	80 b5       	in	r24, 0x20	; 32
 6f4:	86 68       	ori	r24, 0x86	; 134
 6f6:	80 bd       	out	0x20, r24	; 32
	
    OSCCAL= eeprom_read_byte((BYTE*)0x02);
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	4c d0       	rcall	.+152    	; 0x796 <eeprom_read_byte>
 6fe:	81 bf       	out	0x31, r24	; 49
	
    set_rx_pin(RX_PIN); //setto pin di ricezione
 700:	88 e0       	ldi	r24, 0x08	; 8
 702:	74 dd       	rcall	.-1304   	; 0x1ec <set_rx_pin>
    init_timer1_compare(); //inizializzo timer 1 compare
 704:	ac dc       	rcall	.-1704   	; 0x5e <init_timer1_compare>
    baud_setup(2000); //inizializzo ocr1a al valore corretto e imposto piedini
 706:	80 ed       	ldi	r24, 0xD0	; 208
 708:	97 e0       	ldi	r25, 0x07	; 7
 70a:	3d dd       	rcall	.-1414   	; 0x186 <baud_setup>
    init_timer0_ovf(); //inziializzo timer0 per ciclo main
 70c:	b1 dc       	rcall	.-1694   	; 0x70 <init_timer0_ovf>
    start_timer1_compareA(); //start timer interrupt
 70e:	ac dc       	rcall	.-1704   	; 0x68 <start_timer1_compareA>
    start_timer0_ovf(); //start timer interrupt
 710:	b6 dc       	rcall	.-1684   	; 0x7e <start_timer0_ovf>
    sei(); //abilito interrupt globale
 712:	78 94       	sei

    main_loop();
 714:	ca df       	rcall	.-108    	; 0x6aa <main_loop>

00000716 <__udivmodsi4>:
 716:	a1 e2       	ldi	r26, 0x21	; 33
 718:	1a 2e       	mov	r1, r26
 71a:	aa 1b       	sub	r26, r26
 71c:	bb 1b       	sub	r27, r27
 71e:	fd 01       	movw	r30, r26
 720:	0d c0       	rjmp	.+26     	; 0x73c <__udivmodsi4_ep>

00000722 <__udivmodsi4_loop>:
 722:	aa 1f       	adc	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	ee 1f       	adc	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	a2 17       	cp	r26, r18
 72c:	b3 07       	cpc	r27, r19
 72e:	e4 07       	cpc	r30, r20
 730:	f5 07       	cpc	r31, r21
 732:	20 f0       	brcs	.+8      	; 0x73c <__udivmodsi4_ep>
 734:	a2 1b       	sub	r26, r18
 736:	b3 0b       	sbc	r27, r19
 738:	e4 0b       	sbc	r30, r20
 73a:	f5 0b       	sbc	r31, r21

0000073c <__udivmodsi4_ep>:
 73c:	66 1f       	adc	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	1a 94       	dec	r1
 746:	69 f7       	brne	.-38     	; 0x722 <__udivmodsi4_loop>
 748:	60 95       	com	r22
 74a:	70 95       	com	r23
 74c:	80 95       	com	r24
 74e:	90 95       	com	r25
 750:	9b 01       	movw	r18, r22
 752:	ac 01       	movw	r20, r24
 754:	bd 01       	movw	r22, r26
 756:	cf 01       	movw	r24, r30
 758:	08 95       	ret

0000075a <__ashrdi3>:
 75a:	97 fb       	bst	r25, 7
 75c:	10 f8       	bld	r1, 0

0000075e <__lshrdi3>:
 75e:	16 94       	lsr	r1
 760:	00 08       	sbc	r0, r0
 762:	0f 93       	push	r16
 764:	08 30       	cpi	r16, 0x08	; 8
 766:	98 f0       	brcs	.+38     	; 0x78e <__lshrdi3+0x30>
 768:	08 50       	subi	r16, 0x08	; 8
 76a:	23 2f       	mov	r18, r19
 76c:	34 2f       	mov	r19, r20
 76e:	45 2f       	mov	r20, r21
 770:	56 2f       	mov	r21, r22
 772:	67 2f       	mov	r22, r23
 774:	78 2f       	mov	r23, r24
 776:	89 2f       	mov	r24, r25
 778:	90 2d       	mov	r25, r0
 77a:	f4 cf       	rjmp	.-24     	; 0x764 <__lshrdi3+0x6>
 77c:	05 94       	asr	r0
 77e:	97 95       	ror	r25
 780:	87 95       	ror	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	57 95       	ror	r21
 788:	47 95       	ror	r20
 78a:	37 95       	ror	r19
 78c:	27 95       	ror	r18
 78e:	0a 95       	dec	r16
 790:	aa f7       	brpl	.-22     	; 0x77c <__lshrdi3+0x1e>
 792:	0f 91       	pop	r16
 794:	08 95       	ret

00000796 <eeprom_read_byte>:
 796:	e1 99       	sbic	0x1c, 1	; 28
 798:	fe cf       	rjmp	.-4      	; 0x796 <eeprom_read_byte>
 79a:	9f bb       	out	0x1f, r25	; 31
 79c:	8e bb       	out	0x1e, r24	; 30
 79e:	e0 9a       	sbi	0x1c, 0	; 28
 7a0:	99 27       	eor	r25, r25
 7a2:	8d b3       	in	r24, 0x1d	; 29
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
